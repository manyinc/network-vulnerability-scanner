import tkinter
import customtkinter
from customtkinter import *
from CTkScrollableDropdown import *
from PIL import Image, ImageTk
from time import sleep
from single_ip_scanner import *
from multi_ip_scanner import scan_host
from translate_and_save import translate_save
from check_vulnerability import *

customtkinter.set_appearance_mode("System")

class App(customtkinter.CTk):

    #--- App Size ---#
    WIDTH = 800
    HEIGHT = 1000
    #----------------#

#############################################################################################################################################################################################################################################################################

    def __init__(self):
        super().__init__()

        #------------------------------------------- Style -------------------------------------------#
        border_color_setting = "#00cfde"
        hover_color = "#10888c"

        self.entry_config = {
            "height": 30, 
            "corner_radius": 15, 
            "border_width": 1, 
            "border_color": border_color_setting, 
            "font": ("Consolas", 12), 
        }

        self.color_radio_checkox = {
            #"fg_color": ("white", border_color_setting), 
            "border_color": border_color_setting, 
            "hover_color": hover_color, 
            "font": ("Consolas", 12), 
        }

        self.style_checkbox = {
            "corner_radius": 15, 
            "border_width": 1, 
            "font": ("Consolas", 12), 
            **self.color_radio_checkox
        }
        self.style_progressbar = {
            "height": 20, 
            "corner_radius": 10, 
            "border_width": 1, 
            "border_color": border_color_setting, 
            "progress_color": border_color_setting
        }

        self.label_config = {
            "height": 50, 
            "corner_radius": 25, 
            "border_width": 1, 
            "state": "disabled", 
            "font": ("Consolas", 21),
        }
        #---------------------------------------------------------------------------------------------#

        #-------------------------------------- BackGround Image -------------------------------------#
        bg_image = Image.open("assets\\background.jpg")
        self.background_image = ImageTk.PhotoImage(bg_image)
        self.background_label = tkinter.Label(self, image=self.background_image)
        self.background_label.place(x=0, y=0, relwidth=1, relheight=1)
        #---------------------------------------------------------------------------------------------#

        #--------------------------------------- App Grid Config -------------------------------------#
        self.title("NVS - Network Vulnerability Scanner")
        self.geometry(f"{App.WIDTH}x{App.HEIGHT}")
        self.protocol("WM_DELETE_WINDOW", self.on_closing)  # call .on_closing() when app gets closed
        self.wm_resizable(width=False, height=False)



        self.rowconfigure((0, 1, 2, 3, 4, 5, 6, 7, 8, 9), minsize=50, weight=1)
        self.rowconfigure(0, minsize=170)
        self.rowconfigure(2, minsize=180)
        self.rowconfigure(5, minsize=60)
        self.rowconfigure(7, minsize=60)
        self.rowconfigure(8, minsize=60)
        self.rowconfigure(8, minsize=115)


        self.columnconfigure((0, 1, 2, 3, 4, 5), weight=1)
        self.columnconfigure(0, minsize=130)
        self.columnconfigure(1, minsize=180)
        self.columnconfigure(2, minsize=165)
        self.columnconfigure(3, minsize=30)
        self.columnconfigure(4, minsize=165)
        self.columnconfigure(5, minsize=130)        
        #---------------------------------------------------------------------------------------------#

        #------------------------------------------------------------------------------------------------------------------------- User Interface --------------------------------------------------------------------------------------------------------------------------#

        ################################################################################################################################################################################
        #ROW 0
        self.button_process = customtkinter.CTkButton(master=self,  fg_color="#353434",bg_color="#353434", **self.label_config, border_color="#00cfde", text="◀ NETWORK VULNERABILITY SCANNER ▶")
        self.button_process.grid(row=0, column=1, columnspan=4, pady=30, sticky="swe")
        ################################################################################################################################################################################
        #ROW 1
        self.scan_option = customtkinter.CTkComboBox(master=self,  fg_color="#353434",bg_color="#353434", **self.entry_config, button_color="#00cfde", button_hover_color="#10888c", values=["Select scan option | DEF Single host scan"])
        self.scan_option.grid(row=1, column=1, columnspan=3, sticky="we")
        CTkScrollableDropdown(self.scan_option, values=["Single host scan", "Subnet Scan"], frame_border_color="#00cfde", font=("Consolas", 14), frame_corner_radius=15, justify="center", button_color=None, scrollbar=False, frame_border_width=1, hover_color="#FF0000")
        self.button_process = customtkinter.CTkButton(master=self,  fg_color="#353434",bg_color="#353434", text="Apply", height = 30, corner_radius = 15, border_width = 1, border_color = "#00cfde", font=("Consolas", 14), hover_color= "#10888c", command = self.switch_options)
        self.button_process.grid(row=1, column=4, columnspan=1, sticky="e")
        ################################################################################################################################################################################
        #ROW 2
        self.box_ip_checked_true = IntVar(value=1)
        self.frame_options = customtkinter.CTkFrame(master=self,  fg_color="#353434",bg_color="#353434", corner_radius=25, background_corner_colors=None,  border_width=1, border_color="#00cfde")
        self.frame_options.grid(row=2, column=1,columnspan=4,sticky="nswe",pady=15)
        self.frame_options.rowconfigure((0, 1, 2), minsize=50, weight=2)
        self.frame_options.columnconfigure((0, 1, 2, 3), weight=2)
        self.frame_options.columnconfigure(0, minsize=180)
        self.frame_options.columnconfigure(1, minsize=165)
        self.frame_options.columnconfigure(2, minsize=10)
        self.frame_options.columnconfigure(3, minsize=165)
        self.radio_button_1 = customtkinter.CTkCheckBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, state="disabled", variable=self.box_ip_checked_true, text="Single host scan")
        self.radio_button_1.grid(row=0, column=0, columnspan=1, padx = 20, pady=20, sticky="w")
        self.entry_ip_single_adrres = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="Host IP Adress")
        self.entry_ip_single_adrres.grid(row=0, column=1, columnspan=3, padx = 20, pady=20, sticky="we")
        self.box_scan_port = customtkinter.CTkCheckBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, text="Scan port")
        self.box_scan_port.grid(row=1, column=0, columnspan=1, padx = 20, pady=0, sticky="w")
        self.entry_start_port = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="Start port")
        self.entry_start_port.grid(row=1, column=1, columnspan=1, padx = 20, pady=0, sticky="we")
        self.entry_end_port = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="End port")
        self.entry_end_port.grid(row=1, column=3, columnspan=1, padx = 20, pady=0, sticky="we")
        self.box_scan_port_timeout = customtkinter.CTkCheckBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, text="Single port timeout")
        self.box_scan_port_timeout.grid(row=2, column=0, columnspan=1, padx = 20, pady=20, sticky="w")
        self.entry_port_timeout = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="Timeout in ms | DEF 50ms")
        self.entry_port_timeout.grid(row=2, column=1, columnspan=3, padx = 20, pady=20, sticky="we")
        ################################################################################################################################################################################
        #ROW 3
        self.box_data_source = customtkinter.CTkLabel(master=self,  fg_color="#353434",bg_color="#353434", font = ("Consolas", 14), text="▶ Data source :")
        self.box_data_source.grid(row=3, column=1, columnspan=1, padx = 15, sticky="w")
        self.box_data_source_cve = IntVar(value=1)
        self.box_data_cve = customtkinter.CTkCheckBox(master=self,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, state="disabled", variable=self.box_data_source_cve, text="National Vulnerability Database")
        self.box_data_cve.grid(row=3, column=2, columnspan=3, sticky="w")
        ################################################################################################################################################################################
        #ROW 4
        self.box_translate = customtkinter.CTkLabel(master=self,  fg_color="#353434",bg_color="#353434", font = ("Consolas", 14), text="▶ Report Language :")
        self.box_translate.grid(row=4, column=1, columnspan=1, padx = 15, sticky="w")
        self.language_list = customtkinter.CTkComboBox(master=self,  fg_color="#353434",bg_color="#353434", **self.entry_config, button_color="#00cfde", button_hover_color="#10888c", values=["Select language | DEF Eng"])
        self.language_list.grid(row=4, column=2, columnspan=3, sticky="we")
        CTkScrollableDropdown(self.language_list, values=["English", "Polish"], frame_border_color="#00cfde", font=("Consolas", 14), frame_corner_radius=15, justify="center", button_color=None, scrollbar=False, frame_border_width=1, hover_color="#FF0000")
        ################################################################################################################################################################################
        #ROW 5
        self.label_status_info = customtkinter.CTkButton(master=self,  fg_color="#353434",bg_color="#353434", **self.label_config, text="◀ Waiting for execution ▶", border_color="#06c270")  # <- custom tuple-color  
        self.label_status_info.grid(row=5, column=1, columnspan=4, pady=15, sticky="swe")
        ################################################################################################################################################################################
        #ROW 6
        self.progressbar = CTkProgressBar(master=self,  fg_color="#353434",bg_color="#353434", **self.style_progressbar)
        self.progressbar.grid(row=6, column=1, columnspan=4, pady=15, sticky="we")
        self.progressbar.set(0)
        ################################################################################################################################################################################
        #ROW 7
        self.label_status_progressbar_info = customtkinter.CTkButton(master=self,  fg_color="#353434",bg_color="#353434", **self.label_config, text="◀ Progress info ▶", border_color="#ffcc00")  # <- custom tuple-color  
        self.label_status_progressbar_info.grid(row=7, column=1, columnspan=4, pady=15, sticky="swe")
        ################################################################################################################################################################################
        #ROW 8
        self.button_process = customtkinter.CTkButton(master=self,  fg_color="#353434",bg_color="#353434", text="Generate Report", height = 50, corner_radius = 25, border_width = 1, border_color = "#00cfde", font=("Consolas", 14), hover_color= "#10888c", command = self.execute_scan)
        self.button_process.grid(row=8, column=1, columnspan=4, pady=30, sticky="nwe")
        ################################################################################################################################################################################

        #-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#

#############################################################################################################################################################################################################################################################################
    
    def switch_options(self):
        scan_option = self.scan_option.get()
        if scan_option == "Select scan option | DEF Single host scan" or scan_option == "Single host scan":
            self.frame_options.destroy()
            self.frame_options = customtkinter.CTkFrame(master=self,  fg_color="#353434",bg_color="#353434", corner_radius=25, background_corner_colors=None, border_width=1, border_color="#00cfde")
            self.frame_options.grid(row=2, column=1,columnspan=4,sticky="nswe",pady=15)
            self.frame_options.rowconfigure((0, 1, 2), minsize=50, weight=2)
            self.frame_options.columnconfigure((0, 1, 2, 3), weight=2)
            self.frame_options.columnconfigure(0, minsize=180)
            self.frame_options.columnconfigure(1, minsize=165)
            self.frame_options.columnconfigure(2, minsize=10)
            self.frame_options.columnconfigure(3, minsize=165)
            self.radio_button_1 = customtkinter.CTkCheckBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, state="disabled", variable=self.box_ip_checked_true, text="Single host scan")
            self.radio_button_1.grid(row=0, column=0, columnspan=1, padx = 20, pady=20, sticky="w")
            self.entry_ip_single_adrres = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="Host IP Adress")
            self.entry_ip_single_adrres.grid(row=0, column=1, columnspan=3, padx = 20, pady=20, sticky="we")
            self.box_scan_port = customtkinter.CTkCheckBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, text="Scan port")
            self.box_scan_port.grid(row=1, column=0, columnspan=1, padx = 20, pady=0, sticky="w")
            self.entry_start_port = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="Start port")
            self.entry_start_port.grid(row=1, column=1, columnspan=1, padx = 20, pady=0, sticky="we")
            self.entry_end_port = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="End port")
            self.entry_end_port.grid(row=1, column=3, columnspan=1, padx = 20, pady=0, sticky="we")
            self.box_scan_port_timeout = customtkinter.CTkCheckBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, text="Single port timeout")
            self.box_scan_port_timeout.grid(row=2, column=0, columnspan=1, padx = 20, pady=20, sticky="w")
            self.entry_port_timeout = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="Timeout in ms | DEF 50ms")
            self.entry_port_timeout.grid(row=2, column=1, columnspan=3, padx = 20, pady=20, sticky="we")
        else:
            self.frame_options.destroy()
            self.frame_options = customtkinter.CTkFrame(master=self,  fg_color="#353434",bg_color="#353434", corner_radius=25, background_corner_colors=None, border_width=1, border_color="#00cfde")
            self.frame_options.grid(row=2, column=1,columnspan=4,sticky="nswe",pady=15)
            self.frame_options.rowconfigure((0, 1, 2), minsize=50, weight=2)
            self.frame_options.columnconfigure((0, 1, 2, 3), weight=2)
            self.frame_options.columnconfigure(0, minsize=180)
            self.frame_options.columnconfigure(1, minsize=165)
            self.frame_options.columnconfigure(2, minsize=30)
            self.frame_options.columnconfigure(3, minsize=165)
            self.subnet_scan_true = customtkinter.CTkCheckBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, state="disabled", variable=self.box_ip_checked_true, text="Subnet Scan")
            self.subnet_scan_true.grid(row=0, column=0, columnspan=1, padx = 20, pady=20, sticky="w")
            self.entry_ip_multi_adrres_begin = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="Network Address and Subnet e.g. (192.168.1.0/24)")
            self.entry_ip_multi_adrres_begin.grid(row=0, column=1, columnspan=3, padx = 20, pady=20, sticky="we")
            self.box_process_acceleration = customtkinter.CTkCheckBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, text="Process acceleration")
            self.box_process_acceleration.grid(row=1, column=0, columnspan=1, padx = 20, pady=0, sticky="w")
            self.entry_acceleration_speed = customtkinter.CTkComboBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, button_color="#00cfde", button_hover_color="#10888c", values=[f"Process speed   | DEF  T3"])
            self.entry_acceleration_speed.grid(row=1, column=1, columnspan=3, padx = 20, pady=0, sticky="we")
            CTkScrollableDropdown(self.entry_acceleration_speed, values=["Process speed   | DEF  T3", "T0", "T1", "T2", "T3", "T4", "T5"], frame_border_color="#00cfde", font=("Consolas", 14), frame_corner_radius=15, justify="center", button_color=None, scrollbar=True, frame_border_width=1, hover_color="#FF0000")
            self.own_args_box = customtkinter.CTkCheckBox(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.style_checkbox, text="Own args")
            self.own_args_box.grid(row=2, column=0, columnspan=1, padx = 20, pady=20, sticky="w")
            self.entry_own_args = customtkinter.CTkEntry(master=self.frame_options,  fg_color="#353434",bg_color="#353434", **self.entry_config, placeholder_text="Own Args | DEF -host-timeout 3s")
            self.entry_own_args.grid(row=2, column=1, columnspan=3, padx = 20, pady=20, sticky="we")

#############################################################################################################################################################################################################################################################################
  
    def execute_scan(self):
        #try:
            self.info_label("#ffcc00","◀ Network Scanning ▶")
            self.progress_label("#06c270","◀ Step 1 of 6 ▶")
            
            dataset = []
            multi_host_data = {}
            open_ports = []
            ip_status = True

            scan_option = self.scan_option.get()
            language_list = self.language_list.get()

            if scan_option == "Select scan option | DEF Single host scan" or scan_option == "Single host scan":
                entry_ip_single_adrres = self.entry_ip_single_adrres.get()
                #try:
                socket.inet_aton(entry_ip_single_adrres)
                ip_status = True

                box_scan_port = self.box_scan_port.get()
                entry_start_port = self.entry_start_port.get()
                entry_end_port = self.entry_end_port.get()
                box_scan_port_timeout = self.box_scan_port_timeout.get()
                entry_port_timeout = self.entry_port_timeout.get()

                if box_scan_port_timeout == 0:
                    entry_port_timeout = 50
                else:
                    entry_port_timeout = int(entry_port_timeout)

                if box_scan_port == 0:
                    entry_start_port = 64
                    entry_end_port = 1024
                else:
                    entry_start_port = int(entry_start_port)
                    entry_end_port = int(entry_end_port)

                open_ports = scan_ports(self, entry_ip_single_adrres, entry_start_port, entry_end_port, entry_port_timeout)
                self.info_label("#ffcc00","◀ Port checking ▶")
                self.progress_label("#ffcc00","◀ Step 3 of 6 ▶")
                self.progressbar.set(0)
                self.update()
                sleep(0.8)
                self.progressbar.set(1)
                self.update()
                dataset_en = self.vulnerability_scan_open_ports(open_ports, dataset)
    
                translate_save(self,dataset_en,language_list,ip_status,multi_host_data,False,entry_ip_single_adrres, open_ports)
                #except socket.error:
                ip_status = False

            elif scan_option == "Subnet Scan":
                entry_ip_multi_adrres_begin = self.entry_ip_multi_adrres_begin.get()
                ip_status = True
                box_process_acceleration = self.box_process_acceleration.get()
                entry_acceleration_speed = self.entry_acceleration_speed.get()
                own_args_box = self.own_args_box.get()
                entry_own_args = self.entry_own_args.get()
                

                if box_process_acceleration == 0:
                    print("time defoult")
                    entry_acceleration_speed = "-T3 "
                elif entry_acceleration_speed == "Process speed   | DEF  T3":
                    entry_acceleration_speed = f"-{entry_acceleration_speed} "
                else:
                    entry_acceleration_speed = f"-{entry_acceleration_speed} "

                if own_args_box == 0 and ip_status:
                    entry_own_args = "-host-timeout 3s"
                elif entry_own_args != "":
                    entry_own_args = f" {entry_own_args}"
                else:
                    entry_own_args = ""

                if entry_ip_multi_adrres_begin != "": 
                    multi_host_data = scan_host(self,entry_ip_multi_adrres_begin,entry_acceleration_speed,entry_own_args)
                    open_ports = self.list_open_ports(multi_host_data,open_ports)
                    dataset_en = self.vulnerability_scan_open_ports(open_ports, dataset)
                    ip_status = True
                    translate_save(self,dataset_en,language_list,ip_status,multi_host_data,True,entry_ip_multi_adrres_begin, open_ports)
                else:
                    self.info_label("#b41717","◀ Error, check data and try again ▶")

            else:
                self.info_label("#b41717","◀ Error, check data and try again ▶")

            self.info_label("#06c270","◀ Success ▶")
            self.progress_label("#06c270","◀ Done, step 6 of 6 ▶")

        #except:
            self.info_label("#b41717","◀ Error, check data and try again ▶")

#############################################################################################################################################################################################################################################################################
            
    def info_label(self, frame_color, text_value):
        self.label_status_info.destroy()
        self.label_status_info = customtkinter.CTkButton(master=self,  fg_color="#353434",bg_color="#353434", **self.label_config, text=text_value, border_color=frame_color)  # <- custom tuple-color  
        self.label_status_info.grid(row=5, column=1, columnspan=4, pady=15, sticky="swe")
        self.update()

#############################################################################################################################################################################################################################################################################
        
    def progress_label(self, frame_color, text_value):
        self.label_status_progressbar_info.destroy()
        self.label_status_progressbar_info = customtkinter.CTkButton(master=self,  fg_color="#353434",bg_color="#353434", **self.label_config, text=text_value, border_color=frame_color)  # <- custom tuple-color  
        self.label_status_progressbar_info.grid(row=7, column=1, columnspan=4, pady=15, sticky="swe")
        self.update()

#############################################################################################################################################################################################################################################################################
   
    def list_open_ports(self,multi_host_data,open_ports):
        print("##################")
        for network_device in multi_host_data:
            print(network_device['host'])
            if network_device['port'] != "NULL":
                for port in network_device['port']:
                    print(port)
                    if port not in open_ports:
                        open_ports.append(port)
            print("##################")
        open_ports.sort()
        print("******************")
        print(open_ports)
        print("******************")
        self.progress_bar_update(1)
        #open_ports = [443,80,1443,933] | for test pruporsess
        return open_ports    
    
#############################################################################################################################################################################################################################################################################
    
    def vulnerability_scan_open_ports(self, open_ports, dataset):
        if open_ports:
            self.info_label("#ff8800",f"◀ Found {len(open_ports)} open ports ▶")         
            self.progress_label("#ffcc00","◀ Step 4 of 6 ▶")
            sleep(2)
            dataset_en = vulnerability_scan(self, open_ports, dataset)
        return dataset_en
                  
#############################################################################################################################################################################################################################################################################
            
    def status_info_bar(self, msg, border_color_info):
            self.label_status_info.destroy()
            self.label_status_info = customtkinter.CTkButton(master=self,  fg_color="#353434",bg_color="#353434", **self.label_config, text=msg, border_color=border_color_info)  # <- custom tuple-color  
            self.label_status_info.grid(row=5, column=1, columnspan=4, pady=15, sticky="swe")
            self.update()    

#############################################################################################################################################################################################################################################################################

    def progress_bar_update(self,progress_value):
        self.progressbar.set(progress_value)
        self.update()
        
#############################################################################################################################################################################################################################################################################
            
    def progress_bar_multi_roll(self):
        self.progressbar.set(0)
        for i in range(1,1020):
            progress = float((i))/1020
            self.progress_bar_update(progress)
            sleep(0.25)

#############################################################################################################################################################################################################################################################################

    def on_closing(self, event=0):
        self.destroy()

#############################################################################################################################################################################################################################################################################

if __name__ == "__main__":
    app = App()
    app.mainloop()