from googletrans import Translator
from docx2pdf import convert
from datetime import datetime
from time import sleep
from docx.shared import Pt
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx import *

def translate_save(self, dataset_en, language_list, ip_status, multi_host_data, host_type, ip_adrr, open_ports):
    lp = 1
    if language_list == "Polish" and dataset_en and ip_status:

        translator = Translator()
        dataset_pl = dataset_en

        self.info_label("#ffcc00","◀ Translation ▶")
        self.progress_label("#ffcc00","◀ Step 5 of 6 ▶")
        self.progressbar.set(0)
        self.update()

        for thisvol in dataset_pl:
            dsc_to_pl = thisvol["description"]
            dsc_to_pl = translator.translate(dsc_to_pl, dest='pl').text
            thisvol["description"] = dsc_to_pl

        self.progressbar.set(0.5)
        self.update()
        sleep(0.5)
        self.progressbar.set(1)
        self.update()

         #-------------------------------------------- Saving to file --------------------------------------------#
        report = Document()
        sleep(0.5)
        self.progressbar.set(0)
        self.update()
        self.info_label("#ff8800",f"◀ Saving the report ▶")         
        self.progress_label("#06c270","◀ Step 6 of 6 ▶")

#############################################################################################################################################################################################################################################################################
        if host_type:
            report.add_paragraph(f"---------------------------------------------------------------------------------------------------------------------")
            header = report.add_heading(f"Analiza podsieci \n{ip_adrr}\n", level=1)
            run = header.runs[0]
            run.bold = True
            header.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            report.add_paragraph(f"---------------------------------------------------------------------------------------------------------------------")
            header = report.add_heading(f"Otwarte porty znaleziono na poniższych urządzeniach:\n", level=1)
            run = header.runs[0]
            run.bold = True
            header.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

            table = report.add_table(1,5)
            table.style = 'Table Grid'
            table.style.font.name = 'Consolas'
            table.style.font.size = Pt(9)
            table.alignment = 1

            heading_cells = table.rows[0].cells
            #heading_cells.height = Pt(12) 
            heading_cells[0].text = 'Lp'
            heading_cells[1].text = 'Producent'
            heading_cells[2].text = 'Adress IP hosta'
            heading_cells[3].text = 'Adress MAC hosta'
            heading_cells[4].text = 'Otwarte Porty'

            for host in multi_host_data:
                add_table_row(table, lp, str(lp), f"{host['vendor']}", f"{host['host']}", f"{host['mac']}", f"{host['port']}")
                lp += 1
            set_col_widths(table)
            report.add_paragraph(f"\n---------------------------------------------------------------------------------------------------------------------")

        else:    
            report.add_paragraph(f"---------------------------------------------------------------------------------------------------------------------")
            header = report.add_heading(f"Analiza hosta \n{ip_adrr}\n", level=1)
            run = header.runs[0]
            run.bold = True
            header.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            report.add_paragraph(f"---------------------------------------------------------------------------------------------------------------------")
            header = report.add_heading(f"Znaleziono następujące otwarte porty :\n {open_ports}", level=1)
            run = header.runs[0]
            run.bold = True
            header.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            report.add_paragraph(f"\n---------------------------------------------------------------------------------------------------------------------")
#############################################################################################################################################################################################################################################################################
      
        data_len_val = 0.0
        data_len_iter = 1 / (len(dataset_pl) + 1)

        for thisvol in dataset_pl:
            data_len_val = data_len_val+ data_len_iter 
            self.progressbar.set(data_len_val)
            self.update()
            report.add_paragraph("---------------------------------------------------------------------------------------------------------------------")
            report.add_paragraph(f"Znaleziono lukę w zabezpieczeniach na porcie -> {thisvol['port']}", style='ListBullet')
            report.add_paragraph(f"CVE ID  ->  {thisvol['id']}", style='ListBullet')
            report.add_paragraph(f"Data publikacji w NVD  ->  {thisvol['pubished']}", style='ListBullet')
            report.add_paragraph(f"Wynik CVSS v3.x ->  {thisvol['score']}", style='ListBullet')
            report.add_paragraph(f"Opis  ->  {thisvol['description']}", style='ListBullet')
            report.add_paragraph("---------------------------------------------------------------------------------------------------------------------")
        self.progressbar.set(1)
        self.update()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_name = f'reports\\{timestamp}_vulnerabilities_report_pl.docx'
        report.save(report_name)
        convert(report_name)

    elif language_list == "Select language | DEF Eng" or language_list == "English":    
        report = Document()

        self.info_label("#ff8800",f"◀ Saving the report ▶")         
        self.progress_label("#06c270","◀ Step 6 of 6 ▶")
        
#############################################################################################################################################################################################################################################################################
        if host_type:
            report.add_paragraph(f"---------------------------------------------------------------------------------------------------------------------")
            header = report.add_heading(f"Subnet analysis\n{ip_adrr}\n", level=1)
            run = header.runs[0]
            run.bold = True
            header.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            report.add_paragraph(f"---------------------------------------------------------------------------------------------------------------------")
            header = report.add_heading(f"Open ports were found on the following devices:\n", level=1)
            run = header.runs[0]
            run.bold = True
            header.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

            table = report.add_table(1,5)
            table.style = 'Table Grid'
            table.style.font.name = 'Consolas'
            table.style.font.size = Pt(9)
            table.alignment = 1

            heading_cells = table.rows[0].cells
            #heading_cells.height = Pt(12) 
            heading_cells[0].text = 'ID'
            heading_cells[1].text = 'Vendor'
            heading_cells[2].text = 'Host IP address'
            heading_cells[3].text = 'Host MAC address'
            heading_cells[4].text = 'Open Ports'
            print("ok1")
            for host in multi_host_data:
                add_table_row(table, lp, str(lp), f"{host['vendor']}", f"{host['host']}", f"{host['mac']}", f"{host['port']}")
                lp += 1
            print("ok2")
            set_col_widths(table)                
            report.add_paragraph(f"\n---------------------------------------------------------------------------------------------------------------------")
            print("ok3")
        else:    
            report.add_paragraph(f"---------------------------------------------------------------------------------------------------------------------")
            header = report.add_heading(f"Host analysis\n{ip_adrr}\n", level=1)
            run = header.runs[0]
            run.bold = True
            header.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            report.add_paragraph(f"---------------------------------------------------------------------------------------------------------------------")
            header = report.add_heading(f"The following open ports were found:\n {open_ports}", level=1)
            run = header.runs[0]
            run.bold = True
            header.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
            report.add_paragraph(f"\n---------------------------------------------------------------------------------------------------------------------")
#############################################################################################################################################################################################################################################################################

        data_len_val = 0.0
        data_len_iter = 1 / (len(dataset_en) + 1)
        for thisvol in dataset_en:
            data_len_val = data_len_val+ data_len_iter 
            self.progressbar.set(data_len_val)
            self.update()
            report.add_paragraph("---------------------------------------------------------------------------------------------------------------------")
            report.add_paragraph(f"A security vulnerability was found on the port  ->  {thisvol['port']}", style='ListBullet')
            report.add_paragraph(f"CVE ID  ->  {thisvol['id']}", style='ListBullet')
            report.add_paragraph(f"NVD Published Date  ->  {thisvol['pubished']}", style='ListBullet')
            report.add_paragraph(f"CVSS v3.x score  ->  {thisvol['score']}", style='ListBullet')
            report.add_paragraph(f"Description  ->  {thisvol['description']}", style='ListBullet')
            report.add_paragraph("---------------------------------------------------------------------------------------------------------------------")
        self.progressbar.set(1)
        self.update()
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_name = f'reports\\{timestamp}_vulnerabilities_report_en.docx'
        report.save(report_name)
        convert(report_name)

def add_table_row(table,lp,c1,c2,c3,c4,c5):
    cells = table.add_row()
    cells.height = Pt(12) 
    cells = table.rows[lp].cells
    cells[0].text = c1
    cells[1].text = c2
    cells[2].text = c3
    cells[3].text = c4
    cells[4].text = c5


#szerokość kolumn
def set_col_widths(table):
    widths = (Pt(10), Pt(130), Pt(95), Pt(95), Pt(200))
    for row in table.rows:
        for idx, width in enumerate(widths):
            row.cells[idx].width = width